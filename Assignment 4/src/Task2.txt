1. "Variable v1 = new Variable(“a“);
    Build a new Class called "Variable" and its constructor
    takes one String instance as its name.

2. Expr b4 = new BinaryExpr(b2, v1, BinaryOp.DIVIDE);
    Build a new abstract class called "Expr" and make
    both "Literal" and “BinaryExpr” class extend it.
    Also make "Variable" class extend "Expr" class
    so that it could be token as an instance for
    constructor of "BinaryExpr" class.

3. Environment env = new Environment();
    Build a new class called "Environment" with two instance:
    one called "name" in string type and the other one called
    "value" in double type.

4. env.addVariable(“a“, 2.0);
    Add a new method in "Environment" class which
    takes two parameters, String "Name" and
    double "Value", setting the value of both
    its two instances with the input parameters.
    Also add a new method called "getVar", which
    creates a new Literal object with its "Value".

5. System.out.println(b4.evaluate());
    Add a abstract method "evaluate" which takes
    no parameters in class "Expr". Also override
    this method in class "Variable", who would
    throw a RuntimeException when being called.

6. System.out.println(b4.evaluate(env));
    Add a method "evaluate" which takes
    one parameter "env", whose type is "Environment",
    throwing an Exception when being called.
    For convenience we don't set it as abstract since
    only class "BinaryExpr" would override it.

    Override this method in class "BinaryExpr"
    which build a new BinaryExpr object taking
    the original first and last parameters but
    retrieves only the double value from "Variable"
    parameter as its second parameter. Return the
    evaluate() result of this new "BinaryExpr"
    Object.

Summary:

	New class - “Variable” 
		1. String instance - name

		2. Constructor - Variable(String name)
			To initialize the name

		3. public String method - toString
			To provide valid string output for 
			print purpose

		4. public double method - evaluate()
		    To throw a RuntimeException when being
		    called.
		
	New class - “Environment”
		1. String instance - a
		2. double instance - b

		3. public void method - addVariable(String a, double b)
			To initialize the two instance

		4. public Expr method - getVar()
			Return a new Literal object(b)

	New abstract class - “Expr”
		1. default constructor - Expr()
			For polymorphism purpose 
		
		2. public double method - evaluate(Environment env)
			For polymorphism purpose
			Throw an Exception when called

		3. public abstract method - evaluate()
			For polymorphism purpose

	Existing class - Literal
		1. Extend abstract class "Expr"

	Existing class - BinaryExpr
	    1. Extend abstract class "Expr"

		2. Override public double method - evaluate(Environment env)
			To retrieve the double value of this Environment variable
			and use it as the second parameter with its original
			first and last parameter of this BinaryExpr object to 
			create a new BinaryExpr object and return its.evaluate()
			result 

